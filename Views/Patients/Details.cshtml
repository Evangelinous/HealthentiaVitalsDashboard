@model HealthentiaVitalsDashboard.Models.VitalSignsViewModel

<div class="container">
    <div class="mb-4">
        <h2 class="display-5 fw-semibold text-primary">@Model.Patient.Name‚Äôs Vitals</h2>
        <p class="text-muted">Room: <strong>@Model.Patient.RoomNumber</strong> | Age: <strong>@Model.Patient.Age</strong></p>
    </div>

    <form asp-action="Details" method="get" class="mb-4">
        <input type="hidden" name="id" value="@Model.Patient.Id" />
        <input type="hidden" name="page" value="1" />
        <div class="form-check">
            <input class="form-check-input" type="checkbox" name="last24h" value="true" id="last24hCheckbox" @(@Model.FilterLast24h ? "checked" : "") onchange="this.form.submit();" />
            <label class="form-check-label" for="last24hCheckbox">
                Show only last 24 hours
            </label>
        </div>
    </form>

    <div class="card mb-5 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">üìã Vitals Table</h5>
        </div>
        <div class="card-body p-0">
            <table class="table table-hover table-bordered mb-0">
                <thead class="table-light">
                    <tr>
                        <th scope="col">üïí Timestamp</th>
                        <th scope="col">‚ù§Ô∏è Heart Rate</th>
                        <th scope="col">ü©∏ BP (Sys/Dia)</th>
                        <th scope="col">ü´Å O<sub>2</sub> Saturation</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var v in Model.VitalSigns)
                    {
                        var status = v.GetStatus();
                        var rowClass = status switch
                        {
                            VitalStatus.Critical => "table-danger",
                            VitalStatus.Warning => "table-warning",
                            _ => "table-success"
                        };
                        <tr class="@rowClass">
                            <td>@v.Timestamp.ToLocalTime().ToString("g")</td>
                            <td>@v.HeartRate</td>
                            <td>@v.BloodPressureSystolic / @v.BloodPressureDiastolic</td>
                            <td>@v.OxygenSaturation %</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <nav class="mb-5">
        <ul class="pagination justify-content-center">
            @for (int i = 1; i <= @Model.TotalPages; i++)
            {
                <li class="page-item @(i == @Model.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-action="Details" asp-route-id="@Model.Patient.Id" asp-route-page="@i" asp-route-last24h="@Model.FilterLast24h">@i</a>
                </li>
            }
        </ul>
    </nav>

    <div class="mb-5">
        <h3 class="mb-4 text-secondary">üìä Vital Sign Trends</h3>
        <div class="row">
            <div class="col-md-12 mb-4">
                <canvas id="heartRateChart" height="100"></canvas>
            </div>
            <div class="col-md-12 mb-4">
                <canvas id="bloodPressureChart" height="100"></canvas>
            </div>
            <div class="col-md-12 mb-4">
                <canvas id="oxygenChart" height="100"></canvas>
            </div>
        </div>
    </div>

    <a asp-action="Index" class="btn btn-outline-secondary">‚Üê Back to Patient List</a>
</div>

@section Scripts {
    <script>
        const vitals = @Html.Raw(Json.Serialize(Model.VitalSigns.OrderBy(v => v.Timestamp).Select(v => new {
            timestamp = v.Timestamp,
            heartRate = v.HeartRate,
            bloodPressureSystolic = v.BloodPressureSystolic,
            bloodPressureDiastolic = v.BloodPressureDiastolic,
            oxygenSaturation = v.OxygenSaturation
        })));

        const timestamps = vitals.map(v => new Date(v.timestamp).toLocaleTimeString());
        const heartRates = vitals.map(v => v.heartRate);
        const systolic = vitals.map(v => v.bloodPressureSystolic);
        const diastolic = vitals.map(v => v.bloodPressureDiastolic);
        const oxygen = vitals.map(v => v.oxygenSaturation);

        const heartRateChart = new Chart(document.getElementById("heartRateChart"), {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [{
                    label: 'Heart Rate',
                    data: heartRates,
                    borderColor: 'green',
                    tension: 0.4
                }]
            }
        });

        const bloodPressureChart = new Chart(document.getElementById("bloodPressureChart"), {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [
                    {
                        label: 'Systolic',
                        data: systolic,
                        borderColor: 'blue',
                        tension: 0.4
                    },
                    {
                        label: 'Diastolic',
                        data: diastolic,
                        borderColor: 'purple',
                        tension: 0.4
                    }
                ]
            }
        });

        const oxygenChart = new Chart(document.getElementById("oxygenChart"), {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [{
                    label: 'Oxygen Saturation',
                    data: oxygen,
                    borderColor: 'orange',
                    tension: 0.4
                }]
            }
        });

        window.signalRConnection.on("ReceiveVitalUpdate", function (vital) {
            if (vital.patientId !== @Model.Patient.Id) return;

            const time = new Date(vital.timestamp).toLocaleTimeString();

            timestamps.push(time);
            heartRates.push(vital.heartRate);
            systolic.push(vital.bloodPressureSystolic);
            diastolic.push(vital.bloodPressureDiastolic);
            oxygen.push(vital.oxygenSaturation);

            if (timestamps.length > 10) {
                timestamps.shift();
                heartRates.shift();
                systolic.shift();
                diastolic.shift();
                oxygen.shift();
            }

            heartRateChart.update();
            bloodPressureChart.update();
            oxygenChart.update();
        });

        window.signalRConnection.on("ReceiveCriticalAlert", function (alert) {
            if (alert.patientId !== @Model.Patient.Id) return;

            const alertDiv = document.createElement("div");
            alertDiv.className = "alert alert-danger position-fixed top-0 end-0 m-4 shadow";
            alertDiv.innerHTML = `
                <strong>‚ö†Ô∏è Critical Alert:</strong> ${alert.message} <br />
                <small>${new Date(alert.timestamp).toLocaleString()}</small>
                <button type="button" class="btn-close float-end" onclick="this.parentElement.remove()"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 10000);
        });
    </script>
}